version: "3.9"  # Specify Docker Compose version

services:
  db:
    image: mysql:8  # Use MySQL version 8 image
    container_name: mysql  # Name of the MySQL container
    restart: always  # Always restart the container if it stops
    environment:
       MYSQL_DATABASE: bookapi  # Set the MySQL database name
       MYSQL_USER: app  # Set the MySQL user
       MYSQL_PASSWORD: password  # Set the MySQL user password
       MYSQL_ROOT_PASSWORD: rootpassword  # Set the MySQL root password
    volumes:
      - ./mysql-data:/var/lib/mysql  # Mount local folder for MySQL data persistence
    networks:
      - app-network  # Attach the container to the app-network

  api:
    build: ./api  # Build the API service from the Dockerfile in the api directory
    container_name: api  # Name of the API container
    restart: always  # Restart the container automatically if it stops
    ports:
      - "8000:8000"  # Map port 8000 from the container to port 8000 on the host
    environment:
      DB_HOST: db  # Set the database host to the 'db' service
      DB_DATABASE: laravel_db  # Set the database name for the API
      DB_USERNAME: laravel_user  # Set the database username for the API
      DB_PASSWORD: user_password  # Set the database password for the API
    networks:
      - app-network  # Attach the container to the app-network
    volumes:
      - ./api:/var/www  # Mount the local API project directory inside the container
    expose:
      - 8000  # Expose port 8000 internally for communication between containers
    healthcheck:  # Add a health check to monitor the API service
      test: ["CMD", "curl", "-f", "http://localhost:8000/api"]
      interval: 30s  # Check every 30 seconds
      timeout: 10s  # Timeout after 10 seconds
      retries: 3  # Retry 3 times if the check fails

  client:
    build: ./client  # Build the Client service from the Dockerfile in the client directory
    container_name: client  # Name of the Client container
    networks:
      - app-network  # Attach the container to the app-network
    expose:
      - 3000  # Expose port 3000 internally for communication
    ports:
      - "3000:3000"  # Map port 3000 from the container to port 3000 on the host

  nginx:
    image: nginx:alpine  # Use the Nginx Alpine image for a lightweight Nginx server
    container_name: nginx  # Name of the Nginx container
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Mount the Nginx configuration file
      - ./nginx/ssl:/etc/nginx/ssl  # Mount the SSL certificates for HTTPS
    depends_on:
      - api  # Ensure the API container starts before Nginx
      - client  # Ensure the Client container starts before Nginx
    networks:
      - app-network  # Attach the container to the app-network
    ports:
      - "80:80"  # Map HTTP port 80 to the host
      - "443:443"  # Map HTTPS port 443 to the host

networks:
  app-network:
    driver: bridge  # Use a bridge network for communication between containers
